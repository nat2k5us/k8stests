-='cd -'
..='cd ..'
...=../..
....=../../..
.....=../../../..
......=../../../../..
1='cd -1'
2='cd -2'
3='cd -3'
4='cd -4'
5='cd -5'
6='cd -6'
7='cd -7'
8='cd -8'
9='cd -9'
_='sudo '
adb='/Applications/Unity/H/E/2/PlaybackEngines/AndroidPlayer/SDK/platform-tools/adb '
afind='ack -il'
aic='ascii-image-converter '
aqua=asciiquarium
ar='~/art.sh'
awsconfig='~/.aws/credentials'
'bat --color'='always --style=numbers --line-range=:500 {}'
bf='brew info '
bi='brew install '
bombr=bombardier
bs='brew search '
bu='brew uninstall '
c=composer
ccp='composer create-project'
cdo='composer dump-autoload -o'
cdu='composer dump-autoload'
cgemini='code ~/dev/glatlas/services/gemini'
cget='curl -s https://getcomposer.org/installer | php'
cgr='composer global require'
cgrm='composer global remove'
cgu='composer global update'
ci='composer install'
cl=clear
cls=clear
co='composer outdated'
cod='composer outdated --direct'
cr='composer require'
crm='composer remove'
cs='composer show'
csu='composer self-update'
cu='composer update'
cuh='composer update --working-dir=$(composer config -g home)'
curltime='curl -m 3 -w "@/Users/nbontha/Desktop/temp/temp/curl-format.txt" -o /dev/null -s '
cwd='pwd | pbcopy'
d=docker
date=gdate
db='dotnet build'
del='rm -rf'
diff=icdiff
editart='code ~/art.sh'
editaws='code ~/.aws/credentials'
editbash='code /etc/bashrc'
editgit='code ~/.gitconfig'
editk8s='code ~/.kube/config'
editk9s='code ~/.k9s/hotkey.yml'
editli='code ~/light.sh'
editni='code ~/n.sh'
editohmy='code ~/.oh-my-zsh'
editprof='code /etc/profile'
editrw='code ~/Desktop/rocketwork.json'
editvim='code ~/.vimrc'
editzsh='code ~/.zshrc'
egrep='egrep --color=auto --exclude-dir={.bzr,CVS,.git,.hg,.svn,.idea,.tox}'
etcdbkup=$'ETCDCTL_API=3 etcdctl snapshot save /opt/etcd-backup.db \\\n  --cert=/etc/kubernetes/pki/etcd/server.crt \\\n  --key=/etc/kubernetes/pki/etcd/server.key \\\n  --cacert=/etc/kubernetes/pki/etcd/ca.crt '
eventmsg='kde pvc moon-pvc-126 | grep Events: -A 3 | grep Normal | awk -F"  " '\''{ print $6 }'\'
fgf=fzf
fgrep='fgrep --color=auto --exclude-dir={.bzr,CVS,.git,.hg,.svn,.idea,.tox}'
flush='dscacheutil -flushcache'
g=git
ga='git add'
gaa='git add --all'
gam='git am'
gama='git am --abort'
gamc='git am --continue'
gams='git am --skip'
gamscp='git am --show-current-patch'
gap='git apply'
gapa='git add --patch'
gapt='git apply --3way'
gau='git add --update'
gav='git add --verbose'
gb='git branch'
gbD='git branch -D'
gba='git branch -a'
gbd='git branch -d'
gbda='git branch --no-color --merged | command grep -vE "^([+*]|\s*($(git_main_branch)|$(git_develop_branch))\s*$)" | command xargs git branch -d 2>/dev/null'
gbl='git blame -b -w'
gbnm='git branch --no-merged'
gbr='git branch --remote'
gbs='git bisect'
gbsb='git bisect bad'
gbsg='git bisect good'
gbsr='git bisect reset'
gbss='git bisect start'
gc='git commit -v'
'gc!'='git commit -v --amend'
gca='git commit -v -a'
'gca!'='git commit -v -a --amend'
gcam='git commit -a -m'
'gcan!'='git commit -v -a --no-edit --amend'
'gcans!'='git commit -v -a -s --no-edit --amend'
gcas='git commit -a -s'
gcasm='git commit -a -s -m'
gcb='git checkout -b'
gcd='git checkout $(git_develop_branch)'
gcf='git config --list'
gcl='git clone --recurse-submodules'
gclean='git clean -id'
gcm='git checkout $(git_main_branch)'
gcmsg='git commit -m'
'gcn!'='git commit -v --no-edit --amend'
gco='git checkout'
gcor='git checkout --recurse-submodules'
gcount='git shortlog -sn'
gcp='git cherry-pick'
gcpa='git cherry-pick --abort'
gcpc='git cherry-pick --continue'
gcs='git commit -S'
gcsm='git commit -s -m'
gcso=git
gcss='git commit -S -s'
gcssm='git commit -S -s -m'
gd='git diff'
gdca='git diff --cached'
gdct='git describe --tags $(git rev-list --tags --max-count=1)'
gdcw='git diff --cached --word-diff'
gds='git diff --staged'
gdt='git diff-tree --no-commit-id --name-only -r'
gdup='git diff @{upstream}'
gdw='git diff --word-diff'
gf='git fetch'
gfa='git fetch --all --prune --jobs=10'
gfg='git ls-files | grep'
gfo='git fetch origin'
gg='git gui citool'
gga='git gui citool --amend'
ggpull='git pull origin "$(git_current_branch)"'
ggpur=ggu
ggpush='git push origin "$(git_current_branch)"'
ggsup='git branch --set-upstream-to=origin/$(git_current_branch)'
ghh='git help'
gignore='git update-index --assume-unchanged'
gignored='git ls-files -v | grep "^[[:lower:]]"'
git-svn-dcommit-push='git svn dcommit && git push github $(git_main_branch):svntrunk'
gk='\gitk --all --branches &!'
gke='\gitk --all $(git log -g --pretty=%h) &!'
gl='git pull'
glg='git log --stat'
glgg='git log --graph'
glgga='git log --graph --decorate --all'
glgm='git log --graph --max-count=10'
glgp='git log --stat -p'
glo='git log --oneline --decorate'
glod='git log --graph --pretty='\''%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%ad) %C(bold blue)<%an>%Creset'\'
glods='git log --graph --pretty='\''%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%ad) %C(bold blue)<%an>%Creset'\'' --date=short'
glog='git log --oneline --decorate --graph'
gloga='git log --oneline --decorate --graph --all'
glol='git log --graph --pretty='\''%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%ar) %C(bold blue)<%an>%Creset'\'
glola='git log --graph --pretty='\''%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%ar) %C(bold blue)<%an>%Creset'\'' --all'
glols='git log --graph --pretty='\''%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%ar) %C(bold blue)<%an>%Creset'\'' --stat'
glp=_git_log_prettily
glum='git pull upstream $(git_main_branch)'
gm='git merge'
gma='git merge --abort'
gmom='git merge origin/$(git_main_branch)'
gmtl='git mergetool --no-prompt'
gmtlvim='git mergetool --no-prompt --tool=vimdiff'
gmum='git merge upstream/$(git_main_branch)'
go=/usr/local/opt/go@1.17/bin/go
gowd='cd "`pbpaste`"'
gp='git push'
gpd='git push --dry-run'
gpf='git push --force-with-lease'
'gpf!'='git push --force'
gpoat='git push origin --all && git push origin --tags'
gpr='git pull --rebase'
gpristine='git reset --hard && git clean -dffx'
gpsup='git push --set-upstream origin $(git_current_branch)'
gpu='git push upstream'
gpv='git push -v'
gr='git remote'
gra='git remote add'
grb='git rebase'
grba='git rebase --abort'
grbc='git rebase --continue'
grbd='git rebase $(git_develop_branch)'
grbi='git rebase -i'
grbm='git rebase $(git_main_branch)'
grbo='git rebase --onto'
grbom='git rebase origin/$(git_main_branch)'
grbs='git rebase --skip'
grep='grep --color=auto --exclude-dir={.bzr,CVS,.git,.hg,.svn,.idea,.tox}'
grev='git revert'
grh='git reset'
grhh='git reset --hard'
grm='git rm'
grmc='git rm --cached'
grmv='git remote rename'
groh='git reset origin/$(git_current_branch) --hard'
grrm='git remote remove'
grs='git restore'
grset='git remote set-url'
grss='git restore --source'
grst='git restore --staged'
grt='cd "$(git rev-parse --show-toplevel || echo .)"'
gru='git reset --'
grup='git remote update'
grv='git remote -v'
gsb='git status -sb'
gsd='git svn dcommit'
gsh='git show'
gsi='git submodule init'
gsps='git show --pretty=short --show-signature'
gsr='git svn rebase'
gss='git status -s'
gst='git status'
gsta='git stash push'
gstaa='git stash apply'
gstall='git stash --all'
gstc='git stash clear'
gstd='git stash drop'
gstl='git stash list'
gstp='git stash pop'
gsts='git stash show --text'
gstu='gsta --include-untracked'
gsu='git submodule update'
gsw='git switch'
gswc='git switch -c'
gswd='git switch $(git_develop_branch)'
gswm='git switch $(git_main_branch)'
gtall='./run/smoketests/gtuser.sh   all'
gteng='./run/smoketests/gtuser.sh   eng-way'
gtl='gtl(){ git tag --sort=-v:refname -n -l "${1}*" }; noglob gtl'
gtprod='./run/smoketests/gtuser.sh   prod'
gts='git tag -s'
gtv='git tag | sort -V'
gunignore='git update-index --no-assume-unchanged'
gunwip='git log -n 1 | grep -q -c "\-\-wip\-\-" && git reset HEAD~1'
gup='git pull --rebase'
gupa='git pull --rebase --autostash'
gupav='git pull --rebase --autostash -v'
gupom='git pull --rebase origin $(git_main_branch)'
gupomi='git pull --rebase=interactive origin $(git_main_branch)'
gupv='git pull --rebase -v'
gwch='git whatchanged -p --abbrev-commit --pretty=medium'
gwip='git add -A; git rm $(git ls-files --deleted) 2> /dev/null; git commit --no-verify --no-gpg-sign -m "--wip-- [skip ci]"'
gzip='gzip -9n'
h=helm
hf=helmfile
hidefiles='defaults write com.apple.finder AppleShowAllFiles -bool false && killall Finder'
history=omz_history
hrl='helm repo list'
hsr='helm search repo '
hsv='helm show values '
huc='helm upgrade '
imgcat=/Users/nbontha/.iterm2/imgcat
imgls=/Users/nbontha/.iterm2/imgls
ips='ifconfig -a | perl -nle'\''/(\d+\.\d+\.\d+\.\d+)/ && print '\'
ipython='python3 -c '\''import IPython; IPython.terminal.ipapp.launch_new_instance()'\'
it2api=/Users/nbontha/.iterm2/it2api
it2attention=/Users/nbontha/.iterm2/it2attention
it2check=/Users/nbontha/.iterm2/it2check
it2copy=/Users/nbontha/.iterm2/it2copy
it2dl=/Users/nbontha/.iterm2/it2dl
it2getvar=/Users/nbontha/.iterm2/it2getvar
it2git=/Users/nbontha/.iterm2/it2git
it2setcolor=/Users/nbontha/.iterm2/it2setcolor
it2setkeylabel=/Users/nbontha/.iterm2/it2setkeylabel
it2ul=/Users/nbontha/.iterm2/it2ul
it2universion=/Users/nbontha/.iterm2/it2universion
k=kubectl
ka='kubectl apply -f'
kaf='kubectl apply -f'
kall='k get all -A'
kc='kubectl create '
kc1='kubectl create --dry-run=client -oyaml --image '
kca='_kca(){ kubectl "$@" --all-namespaces;  unset -f _kca; }; _kca'
kccc='kubectl config current-context'
kccm='kubectl create configmap'
kcdc='kubectl config delete-context'
kcgc='kubectl config get-contexts'
kcn='kubectl config set-context --current --namespace'
kcp='kubectl cp'
kcr='kubectl --dry-run=client -oyaml create '
kcsc='kubectl config set-context'
kctx=kubectx
kcuc='kubectl config use-context'
kd='kubectl delete --grace-period=0 --force'
kdcj='kubectl describe cronjob'
kdcm='kubectl describe configmap'
kdd='kubectl describe deployment'
kdds='kubectl describe daemonset'
kde='kubectl describe'
kde-msg='f(){ kde "$@" | grep Events: -A 3 | grep Normal | awk -F"  " '\''{ print $6 }'\''; unset -f f; }; f'
kdel='kubectl delete'
kdelcj='kubectl delete cronjob'
kdelcm='kubectl delete configmap'
kdeld='kubectl delete deployment'
kdelds='kubectl delete daemonset'
kdelf='kubectl delete -f'
kdeli='kubectl delete ingress'
kdelj='kubectl delete job'
kdelno='kubectl delete node'
kdelns='kubectl delete namespace'
kdelp='kubectl delete pods'
kdelpvc='kubectl delete pvc'
kdels='kubectl delete svc'
kdelsa='kubectl delete sa'
kdelsec='kubectl delete secret'
kdelss='kubectl delete statefulset'
kdi='kubectl describe ingress'
kdj='kubectl describe job'
kdno='kubectl describe node'
kdns='kubectl describe namespace'
kdoc='function __kdoc() {cat docs.txt| grep $1 -C $2; unset -f __kdoc; }; __kdoc'
kdp='kubectl describe pods'
kdpo=' f() { for po in `kubectl get po | grep "$@"  | awk "{ print $1 }" ` ; do k get po  $po; done; unset -f f; }; f '
kdpvc='kubectl describe pvc'
kdrs='kubectl describe replicaset'
kds='kubectl describe svc'
kdsa='kubectl describe sa'
kdsec='kubectl describe secret'
kdss='kubectl describe statefulset'
ke='k explain '
kecj='kubectl edit cronjob'
kecm='kubectl edit configmap'
ked='kubectl edit deployment'
keds='kubectl edit daemonset'
kei='kubectl edit ingress'
kej='kubectl edit job'
keno='kubectl edit node'
kens='kubectl edit namespace'
kep='kubectl edit pods'
kepvc='kubectl edit pvc'
kers='kubectl edit replicaset'
kes='kubectl edit svc'
kess='kubectl edit statefulset'
keti='kubectl exec -t -i'
kg='kubectl get -o wide --show-labels'
kga='kubectl get all'
kgaa='kubectl get all --all-namespaces'
kgc='k config get-contexts '
kgcc='k config current-context'
kgcj='kubectl get cronjob'
kgcm='kubectl get configmaps'
kgcma='kubectl get configmaps --all-namespaces'
kgcn='kubectl describe pod | grep -i namespace -m 1'
kgcp='kubectl get pod  -o '\''jsonpath={.spec.containers[*].name}'\'
kgd='kubectl get deployment'
kgda='kubectl get deployment --all-namespaces'
kgds='kubectl get daemonset'
kgdsw='kgds --watch'
kgdw='kgd --watch'
kgdwide='kgd -o wide'
kge='kubectl get ep -o wide'
kgh='kubectl get hpa'
kgi='kubectl get ingress'
kgia='kubectl get ingress --all-namespaces'
kgj='kubectl get job'
kgn='kubectl get nodes -o wide --show-labels'
kgno='kubectl get nodes'
kgns='kubectl get namespaces'
kgp='kubectl get pods'
kgpa='kubectl get pods --all-namespaces'
kgpall='kubectl get pods --all-namespaces -o wide'
kgpl='kgp -l'
kgpn='kgp -n'
kgpsw='kubectl get pods -o wide --show-labels'
kgpv='kubectl get pv -o wide'
kgpvc='kubectl get pvc'
kgpvca='kubectl get pvc --all-namespaces'
kgpvcw='kgpvc --watch'
kgpw='kgp --watch'
kgpwide='kgp -o wide'
kgr='kubectl get replicasets -o wide'
kgrs='kubectl get replicaset'
kgs='kubectl get svc'
kgsa='kubectl get svc --all-namespaces'
kgse='kubectl get secrets -o wide'
kgsec='kubectl get secret'
kgseca='kubectl get secret --all-namespaces'
kgss='kubectl get statefulset'
kgssa='kubectl get statefulset --all-namespaces'
kgssw='kgss --watch'
kgsswide='kgss -o wide'
kgsw='kgs --watch'
kgswide='kgs -o wide'
kgw='kubectl get -o wide'
kl='kubectl logs'
kl1h='kubectl logs --since 1h'
kl1m='kubectl logs --since 1m'
kl1s='kubectl logs --since 1s'
klf='kubectl logs -f'
klf1h='kubectl logs --since 1h -f'
klf1m='kubectl logs --since 1m -f'
klf1s='kubectl logs --since 1s -f'
kmfe='sudo pkill -f McAfeeATP'
kn='kubectl config set-context --current --namespace '
kp='kubectl patch pvc  -p '\''{metadata:{finalizers:null}}'\'' '
kpf='kubectl port-forward'
kppv='kubectl patch pv $1  -p {metadata:{finalizers:null}} '
kppvc='kubectl patch pv $1  -p {metadata:{finalizers:null}} '
kr='kubectl run --dry-run=client -oyaml'
kr1='kubectl run --dry-run=client -oyaml --image '
krh='kubectl rollout history'
kroll=' f(){ kubectl rollout "$1" deployments "$2" ;  unset -f f; }; f '
krsd='kubectl rollout status deployment'
krsss='kubectl rollout status statefulset'
kru='kubectl rollout undo'
ksc='kubectl config use-context '
ksd='kubectl scale deployment'
ksss='kubectl scale statefulset'
kt='kubectl run tmp --image=nginx:alpine --rm -it --restart=Never '
kt1='kt -- sh -c "i=0;while true; do curl -m 2  c1-svc;i=$((i+1)); sleep 1; done";kd po tmp'
ktl='ka ~/Desktop/temp/temp/testpod.yaml; kx nginx-pod -- sh '
kw='watch -n 0.5 "kubectl get no,ns,po,rs,deploy,job,cronjob,cm,sa,secrets,pv,pvc,svc,ep,ingress -owide —-show-labels;"'
kx='kubectl exec -i -t '
l='ls -lah'
la='ls -lAh'
li='~/light.sh'
ll='ls -lh'
lla='ls -Gla'
ls='ls -G'
lsa='ls -lah'
lsl='ls -RhlL'
lsnet='lsof -i | grep -E '\''(LISTEN|ESTABLISHED)'\'
m=minikube
md='mkdir -p'
myip='dig +short myip.opendns.com @resolver1.opendns.com'
ni='~/n.sh'
ofd='open_command $PWD'
openports='lsof -Pn -i4  '
pc='sudo port clean --all installed'
pgeng='./run/smoketests/smoke-pg.sh   eng'
pi='sudo port install'
ping='ping -c 5'
pli='port livecheck installed'
plm=port-livecheck-maintainer
podawk='f(){ kubectl get "$@"  --no-headers | awk  '\''{ print $3 }'\''; unset -f f; }; f'
psu='sudo port selfupdate'
pumpitup='sudo osascript -e '\''set volume 10'\'
puni='sudo port uninstall inactive'
puo='sudo port upgrade outdated'
pup='sudo port selfupdate && sudo port upgrade outdated'
py=python3
pyfind='find . -name "*.py"'
pygrep='grep -nr --include="*.py"'
pyserver='python3 -m http.server'
python=python3
ql='qlmanage -p 2>/dev/null'
rd=rmdir
redisc='k apply -f ~/Desktop/temp/temp/redisclient.yaml '
run-android=cd
run-help=man
run-ios=cd
showfiles='defaults write com.apple.finder AppleShowAllFiles -bool true && killall Finder'
smokeeng='sh ./run/smoketests/art.sh osandroid1 poweruser  eng-way us-eng 15'
smokeeng-noway='sh ./run/smoketests/art.sh osandroid1 poweruser  eng us-eng 15'
smokelocal='sh ./run/smoketests/art.sh osandroid1 poweruser local us-eng 15'
smokeprod='sh ./run/smoketests/art.sh M944444444 poweruser1 prod-way us 1'
stfu='osascript -e '\''set volume output muted true'\'
testpod='kubectl run test-nslookup --image=busybox:1.28 --rm -it --restart=Never -- nslookup  '
testsvc='kubectl run test-nslookup --image=busybox:1.28 --rm -it --restart=Never -- nslookup  '
tf=terraform
token='~/getToken.sh'
tpeng='aws eks update-kubeconfig --name tp-eng-usva-2 --region us-east-1 --alias tpeng'
tpprod='aws eks update-kubeconfig --name tp-prod-usva-2 --region us-east-1 --alias tpprod'
updateaws='pbpaste | sed -e "s/\[.*/\[default\]/g" > ~/.aws/credentials'
vie='vi -u NONE '
vlc=/Applications/VLC.app/Contents/MacOS/VLC
which-command=whence
wrap_args=' f(){ echo before "$@"  after;  unset -f f; }; f '
yd='ydiff  -s -w0 '
yqclean='yq eval '\''del(.status,.metadata.annotations,.metadata.creationTimestamp,.metadata.managedFields,.spec.tolerations)'\'' - '
