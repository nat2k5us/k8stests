apiVersion: apps/v1
kind: Deployment
metadata:
  name: bluenginx
  labels:
    app: nginx
spec:
  strategy:
    rollingUpdate:
      maxSurge: 30%
      maxUnavailable: 10
    type: RollingUpdate
  replicas: 3
  selector:
    matchLabels:
      app: nginx
  minReadySeconds: 5
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
        - name: nginx
          image: nginx:stable
          livenessProbe:
            httpGet:
              path: /
              port: 80
            initialDelaySeconds: 10
            periodSeconds: 20
            timeoutSeconds: 10
          readinessProbe:
            httpGet:
              path: /
              port: 80
            initialDelaySeconds: 3
            periodSeconds: 5
            timeoutSeconds: 10
          resources:
            requests:
              cpu: "50m"
              memory: "64Mi"
            limits:
              cpu: "100m"
              memory: "128Mi"

---
apiVersion: v1
kind: Service
metadata:
  name: nginx-svc
spec:
  selector:
    app: nginx
  ports:
    - protocol: TCP
      port: 80
      targetPort: 80
  type: LoadBalancer

# ---
# apiVersion: extensions/v1beta1
# kind: Ingress
# metadata:
#   name: "nginx-ingress"
#   annotations:
#     kubernetes.io/ingress.class: alb
#     alb.ingress.kubernetes.io/scheme: internet-facing
#     alb.ingress.kubernetes.io/target-type: ip
#     # alb.ingress.kubernetes.io/listen-ports: '[{"HTTP":80,"HTTPS": 443}]'
#     alb.ingress.kubernetes.io/subnets: << subnet details of your the stack comma seperated . eg: ssubnet-0xxxxxx,subnet-5xxxxxx >>
#     alb.ingress.kubernetes.io/listen-ports: '[{"HTTP":80}]'
#     alb.ingress.kubernetes.io/healthcheck-path: /
#     # alb.ingress.kubernetes.io/healthcheck-path: "/"
#     alb.ingress.kubernetes.io/success-codes: '200,404'
#   labels:
#     app: nginx
# spec:
#   rules:
#     - http:
#         paths:
#           - path: /*
#             backend:
#               serviceName: "nginx-svc"
#               servicePort: 80
